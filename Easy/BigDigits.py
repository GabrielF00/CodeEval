__author__ = 'Gabriel Fishman'
"""
BIG DIGITS
CHALLENGE DESCRIPTION:

See: https://www.codeeval.com/open_challenges/163/
In this challenge you're presented with a situation in which you need to output big symbols on devices which only
support ASCII characters and single, fixed-width fonts. To do this you're going to use pseudo-graphics to 'draw'
these big symbols.

Here is an example of the font with digits from 0 to 9:

-**----*--***--***---*---****--**--****--**---**--
*--*--**-----*----*-*--*-*----*-------*-*--*-*--*-
*--*---*---**---**--****-***--***----*---**---***-
*--*---*--*-------*----*----*-*--*--*---*--*----*-
-**---***-****-***-----*-***---**---*----**---**--
--------------------------------------------------

Each pixel is marked either with asterisk '*' or with minus '-'. Size of a digit is 5 x 6 pixels.

Your task is to write a program, which outputs the numbers given to you with the font as in the example.

INPUT SAMPLE:

The first argument is a file that contains the lines with digits sequences you need to magnify. E.g.:

* 3.1415926
* 1.41421356
* 01-01-1970
* 2.7182818284
* 4 8 15 16 23 42

OUTPUT SAMPLE:

Print to stdout the magnified digits:

***----*---*-----*--****--**--***---**--
---*--**--*--*--**--*----*--*----*-*----
-**----*--****---*--***---***--**--***--
---*---*-----*---*-----*----*-*----*--*-
***---***----*--***-***---**--****--**--
----------------------------------------
--*---*-----*---*---***----*--***--****--**--
-**--*--*--**--*--*----*--**-----*-*----*----
--*--****---*--****--**----*---**--***--***--
--*-----*---*-----*-*------*-----*----*-*--*-
-***----*--***----*-****--***-***--***---**--
---------------------------------------------
-**----*---**----*----*---**--****--**--
*--*--**--*--*--**---**--*--*----*-*--*-
*--*---*--*--*---*----*---***---*--*--*-
*--*---*--*--*---*----*-----*--*---*--*-
-**---***--**---***--***--**---*----**--
----------------------------------------
***--****---*---**--***---**----*---**--***---**---*---
---*----*--**--*--*----*-*--*--**--*--*----*-*--*-*--*-
-**----*----*---**---**---**----*---**---**---**--****-
*-----*-----*--*--*-*----*--*---*--*--*-*----*--*----*-
****--*----***--**--****--**---***--**--****--**-----*-
-------------------------------------------------------
-*----**----*--****---*---**--***--***---*---***--
*--*-*--*--**--*-----**--*-------*----*-*--*----*-
****--**----*--***----*--***---**---**--****--**--
---*-*--*---*-----*---*--*--*-*-------*----*-*----
---*--**---***-***---***--**--****-***-----*-****-
--------------------------------------------------

"""
import re
import sys

digits = {
    '0' : [
        '-**--',
        '*--*-',
        '*--*-',
        '*--*-',
        '-**--',
        '-----'
    ],
    '1' : [
        '--*--',
        '-**--',
        '--*--',
        '--*--',
        '-***-',
        '-----'
    ],
    '2' : [
        '***--',
        '---*-',
        '-**--',
        '*----',
        '****-',
        '-----'
    ],
    '3' : [
        '***--',
        '---*-',
        '-**--',
        '---*-',
        '***--',
        '-----'
    ],
    '4' : [
        '-*---',
        '*--*-',
        '****-',
        '---*-',
        '---*-',
        '-----'
    ],
    '5' : [
        '****-',
        '*----',
        '***--',
        '---*-',
        '***--',
        '-----'
    ],
    '6' : [
        '-**--',
        '*----',
        '***--',
        '*--*-',
        '-**--',
        '-----'
    ],
    '7' : [
        '****-',
        '---*-',
        '--*--',
        '-*---',
        '-*---',
        '-----'
    ],
    '8' : [
        '-**--',
        '*--*-',
        '-**--',
        '*--*-',
        '-**--',
        '-----'
    ],
    '9' : [
        '-**--',
        '*--*-',
        '-***-',
        '---*-',
        '-**--',
        '-----'
    ]
}

with open(sys.argv[1], 'r') as test_cases:
    for test_case in test_cases:
        test_case = re.sub(r'[^0-9]', '', test_case)
        for i in range(6):
            output = ""
            for j in test_case:
                output += digits[j][i]
            print output
